 Klein is the most underrated AI code editor out there. So in this video, I'll show you how to use Klein to build any app you want, even if you are a complete beginner. So what even is Klein? Klein is an open source AI agent that helps you write and manage code. It's also very customizable. You can use any model you want in any code editor with any prompts, and you can even do custom forks of Klein and build your own version of Klein. And later in the video, I'll also explain how Klein compares to alternatives such as Cursor and Windsurf and which one you should use. So make sure to watch until the end. Real quick, I'm hiring a backend developer to help me build Vectl. So if you have five plus years of experience, make sure to apply. The link is going to be below the video. Now, you might be wondering, but David, how is Klein different from Cursor, Windsurf, Bolt, and all the other AI vibe coding apps? Well, first off, it's not a standalone app. It's an extension in VS Code, meaning you can use it in any code editor that's built on top of VS Code, which, by the way, both Cursor and Windsurf are. But the main difference is that Klein is completely open. Which means you can see exactly how it works. You can see the inner prompts. You can fork it, build your own version of Klein. You can improve it, do pull requests on the main repo. There are so many things that are unlocked by the fact that Klein is open source. Plus, it is constantly evolving. Klein released several major updates over the past few months, which made it really, really powerful. Some of those features are YOLO mode, MCP marketplace, plan and act cycle, local browser automation, and so much more. I guess there is a reason why Klein is one of the fastest growing AI coding tools in the world. And later in the video, you'll see just how powerful it really is. All right. So to get started with Klein, we need to install VS Code. So just type in VS Code download into Google and click on the first link. Then select your operating system. So I'm on Mac. So I'm going to choose that. And this should be a pretty quick download. And there it is. VS Code has been installed. Now, if you get stuck at any point for whatever reason, just go into ChatGPT, send it a screenshot and describe what's happening. It's 2025 and there is no reason to fear installing apps and getting stuck on simple errors. The AI, especially, O3 can solve 99% of errors you will encounter. So do not use the fact that you're a non-technical person as an excuse. Anybody can do this. So now that we have VS Code, we need to add Klein, which is an extension. So on the left, click on this button, which opens up these extensions and type in Klein. Here's what it should look like. It should have around 1.3 million downloads. So click on that and hit install. Trust publisher and install. Now, once Klein finishes installing, you should see on the left a new button with the Klein logo. And this is exactly how you interact with Klein. Now, there are two main options you have when using Klein. You can either get started for free or you can use your own API key to access more powerful models such as Cloud 3.7 Sonnet. And that's what I would recommend you to do. So let's click on use your own API key. And as you can see, Klein lets us use multiple different API providers such as OpenRouter, Anthropic, Amazon Bedrock and so on. But honestly, all you need to do is just use OpenRouter because that offers all the different AI models. So let's head on to OpenRouter and go to the top right and simply create an account. This is super easy. It takes 20 seconds. Then click on credits and here you might have like five dollars of free credits. I don't know if this promotion is still on. If you don't have it, then make sure to charge up a few dollars. That way you can use Klein at its fullest potential. All right. So once you have some dollars in here, click on the top right again and click on keys and here click on create key. Let's name it Klein API key. Create and copy this. Now, do not share your API keys with anybody. Treat them as passwords. OK, so copy, go back into VS Code. And paste in your OpenRouter API key. Let's go. Now, as you can see, Klein just released a brand new update. So let's take a look at what's improved. So the first change is improved Gemini caching and transparency. Basically, Klein is going to be caching more tokens when using Gemini, saving you even more money. Another big change in this Klein update is that there is more flexibility with enhanced checkpoints. So now they've added more checkpoints across the task workflows. So you can reset at different points. Now, this one is interesting. You can now easily generate project standards with typing slash new rule. So when you use this new command, it will cause Klein to generate a rule set, such as a curse rules file of your entire project, all done autonomously by itself, which is pretty impressive. I'm going to link this entire changelog below the video. Now, just to give you an idea of how popular Klein is getting, it is always number one on OpenRouter on any AI model. So this is GPT 4.1. And by the way, my startup Vectl is number 17 with 64 million tokens used in the last week. So, yeah. It really is the most underrated AI code editor out there. All right. So let's go back into VS Code and on the top left, click on File, Open Folder and select a folder where you want Klein to work in. So I just created an empty folder named Code and let's open that. So first off, before you start with anything, make sure to switch into the plan mode. This is essential to maximize results with Klein because it will first create a clear plan for your project and then only once you both agree that this is a solid plan, it will start executing it. So let's click on plan. And to show you the power of Klein, I'm going to have it one shot a game of chess. So here's my prompt. I want to build a simple game of chess, create a plan for this. I want to do this in as little code as possible. Let's send that. Now, as you can see with Klein, you can easily see the amount of tokens coming in, coming out, as well as how much of the context window you're using based on the model. So currently we're using Cloud 3.7 Sonnet, which has a 200,000 token context window. And we can easily see that the first prompt and the response filled out 12,000. This gives you so much like mental clarity about whether you should start a new chat or how much context you've provided in your current chat. And as a bonus, you can also see your API costs. So this is instantly a benefit of Klein over Windsurf and Cursor, which don't really have so much transparency. OK, so let's take a look at the response. As you can see, it starts writing. I need to create a plan since I'm in plan mode. I should focus on gathering information, asking questions. So it knows it's in plan mode. It cannot make changes. All right. So then it designed a simple implementation plan for the chess game and it also creates an architecture overview with a visual graph. Wow, I did not expect that. OK, so it outlines core components of the game, minimizing code and creates a development phase. Not bad, not bad at all. So what we're going to do before switching to ACT is we're going to turn on YOLO mode, also known as Auto-Approve, by clicking this checkbox next to it. This opens up the menu for Auto-Approve. And as it says, Auto-Approve allows Klein to perform the following actions without asking for permissions. So it makes Klein even more autonomous. Now, obviously, there is some risk assigned to it. However, if you want to be a true vibe coder, you absolutely need to turn on every YOLO mode or Auto-Approve that you see. OK, so let's give it ability to read project files, edit project files, execute safe commands, and if you're feeling a bit spicy, you can also do execute all commands. But for most of you, I wouldn't recommend you doing that. And definitely use the browser. Why not? And if you want to add MCP servers, you can also enable this. By the way, if you want me to make a video on how to add different MCP servers into your Klein, make sure to comment below. If enough people want it, I'll make that happen. And finally, you can also set the max amount of requests Klein can do autonomously before asking for approval. So by default, it's 20. I would probably recommend doing something like 15, 10 to 15. I think that's a sensible range. OK, so once you're happy with your settings, just make sure to click on Auto-Approve again and collapse this and now Auto-Approve is turned on. So anytime we're in the Act mode, which we should switch right now, Klein will just start working by itself and execute all these things that it listed out while it's active. So let's see what it was in the planning mode. Now, as you can see, Klein is already working on our chess game. And here we can see the new checkpoints in the chat. So after each change or actually before each change, you can see a checkpoint where if you like something but you don't like the next step, you can just return to the first one and still have that progress. Now, while Klein is running, let's talk about vibe coding. So as the world's best vibe coder, I want to write as little of the code as possible. And since we're in 2025, the AI already writes 99.9% of my code, which is a lot of code. So the next step to optimize is writing as few prompts as possible. So if you're already writing basically zero code because the AI does it for you, the next step is to write as few words in the prompts as possible while still getting the result you want. And that's exactly where Klein's YOLO mode, aka Auto-Approve comes into play. It lets me take vibe coding to the next level by acting autonomously and just doing all the changes itself, which I guess we can now call it vibe sitting, because you will just literally sit, maybe speak once every 10 minutes, the rest for you. So who knows? Maybe vibe sitting is the next evolution of vibe coding. Now, another term you have to understand is vibe learning. Often I get messages in the new society from people who say they are new to AI and feel overwhelmed or lost. But what you guys don't realize is that I also get lost. The difference is that I learn when I'm lost. I ask the AI, what is the error? How can I learn more about this? How do I debug this properly? And I don't let these mistakes or errors discourage me. I don't let them stop me. So many of you watching this, just give up at the slightest obstacle. What you should do instead is take a deep breath and consult with AI. This is what I call vibe learning. When you are vibe coding, instead of turning your brain off like most people do, you should be paying the utmost attention and asking the AI follow up questions. Why did you do this? Why did that fix work? Why didn't the previous fix work? Try to learn as much as possible. Learning has never been easier with AI. You can ask it 50 personalized questions in a matter of a few minutes. So don't be just a vibe coder, be a vibe learner as well. All right, let's go back to VS Code and see what Klein did. So our total API cost for this chess game was two point five dollars. Not bad given we're using Cloud 3.7. And let's scroll through these steps to see what's happening. All right. So this is actually insane. Klein can use the browser itself. It can run a headless browser and see if the code it wrote works. Guys, we really were sleeping on Klein. I don't know how many of you have tried it, but I should have tried it earlier. For sure. All right, let's go all the way down to see what is the last thing. So task completed. I've successfully fixed the chess game, blah, blah, blah. OK, so we can actually switch to plan more. I can say, how do I run this game now? Answer in short. And I'm doing this to prove that you really don't need any programming experience. You can just ask, how do I run this? Whatever code it writes, how do I execute this? How do I run this? How do I test this? Don't be scared of code. So many of you guys are limited by only going for no code tools. There's a huge mistake. With code, you can build anything. With no code tools, you're limited to that platform. So it told me open index HTML. So all we need to do is open a terminal, command J, and let's just run open index HTML. Now, we all know that you are the average of the five people you spend the most time with. And a lot of us don't have people in our real life who are interested in AI. That's why I created New Society. This is a community of people at the cutting edge of AI. People who are actually doing stuff. And by the way, we have an entire channel for this named Wins. And in here you can see the wins of the members of the community. For example, five days ago, John has made ninety thousand dollars by selling an MVP, Minimum Viable Product of his AI startup. 90K. And this is just one of many different member wins we have in the new society. So if you're serious about AI and you want to surround yourself with people at the cutting edge, make sure to join the new society. The link is below the video. OK, so let's switch to our browser. And there it is. There is the simple chess game and it's white stern. So by the way, this was a single prompt, a short prompt at that. Let's see if this works. So white stern. OK, so let's do a simple pawn move. All right. So now it's black. So it's white stern. Let's counter that. Let's see if we can take. OK, we can. Very impressive. So let's do black. Takes. Takes. Queen. OK, it's white stern. Queen. OK, queen can move. Check. Black is in check. It knows that. So wait, let me see if I can move. No, I cannot move other pieces. I can only move the ones that will defend the check, which in this case is only the king, I guess. So, wow, this really is an actual chess game. Black is in check again. Wow, this really works. This is a full complete chess game with all the rules implemented, done in a single prompt with no errors. Guys, don't be sleeping on Klein. Now, to prove that this wasn't just a one off, I'm going to create a new Klein chat and I'm going to have it one shot a different game. This time it's Minesweeper. So obviously everyone knows Minesweeper. It's one of the most OG games in the world. And it's also very different from chess. So as always, we start in the plan mode. That way Klein can design a line of what this would look like. Basically, it thinks before it acts. It's like taking reasoning, but to the next level. So here it generated 23,000 tokens before even writing any lines of code. Think about that. 23,000 tokens, which means that once it started writing code, it considered the multiple different angles. It considered how to do it. It considered what mistakes not to make. A lot of things that it thought about before even writing any code. So I'm just going to switch to act mode and let Klein do the rest. This is the state of vibe coding in 2020. If you get stuck somewhere, take a screenshot, describe what happened, how you got to that point and let the AI do the rest. I mean, this is how I built Vectel, which is my startup, which I've built with zero previous startup experience. Zero Next.js front end backend experience. Nothing. When I started, I didn't even fully understand the concept of APIs. And I built a successful AI startup by using AI. So I'm not just talking about this. I'm actually doing it myself. All right. So there it is. Klein has wrote all the code and it's started terminal as well. Okay. So the Minesweeper is actually fully in the terminal and it also opened the terminal and ran the command to start the Minesweeper. So let's enter the board size. I'm going to say 50. Actually, let's do 25. Okay. So that was invalid for some reason. But whatever. Let's enter the number of mines. I'm going to do 20. And there it is. We have a nice graphic Minesweeper in the terminal. Okay. Let's do R55. Boom. Okay. So no mine. Good. Let's do F43. Okay. We flagged that. So as you can see, we have a working Minesweeper app. Again, one shot it by Klein. This is amazing. Completely one shot it by Klein without any issues whatsoever. So if you still have excuses about, oh, I'm not technical, I'm not a programmer, this or that, guys, it's the May of 2025. AI has gotten so good that all you need to do is write a single prompt and just click accept and accept. And you can one shot interactive games or full stack web apps with tools like Klein. So if you want me to make more videos on Klein, such as how to fork it and how to build your own version of Klein or how to connect MCPs, make sure to comment below and also make sure to subscribe. If I see a lot of people subscribing from this video, I will know that you guys want to see more Klein content. With that being said, thank you for watching and have a wonderful, productive week. See ya.